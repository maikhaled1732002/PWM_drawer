
pwm_drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000261c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000261c  000026b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008c  0080008c  000026dc  2**0
                  ALLOC
  3 .stab         000024b4  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001374  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000061b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_10>
      2c:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 12 	call	0x2418	; 0x2418 <main>
      8a:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <pwm_init>:
 * set ocomode
 * set interrupt state
 * set prescalar
 *
 */
void pwm_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//fast pwm mode non inverting

	SET_BIT(TCCR0,3);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

	CLR_BIT(TCCR0,4);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24

	SET_BIT(TCCR0,0);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8d 7f       	andi	r24, 0xFD	; 253
     ba0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <timer_init>:
void timer_init(){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
SET_BIT(TCCR0,4);
SET_BIT(TCCR0,5);
#endif

#elif TIMER0_MODE ==TIMER_FAST_PWM_MODE
SET_BIT(TCCR0,3);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	8c 93       	st	X, r24
SET_BIT(TCCR0,6);
     bcc:	a3 e5       	ldi	r26, 0x53	; 83
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 64       	ori	r24, 0x40	; 64
     bd8:	8c 93       	st	X, r24
//set pwm wave on oc
#if TIMER_FAST_PWM_MODE_CONDITION ==FAST_PWM_OC0_DISCONNECTED
CLR_BIT(TCCR0,4);
CLR_BIT(TCCR0,5);
#elif TIMER_FAST_PWM_MODE_CONDITION ==FAST_PWM_OC0_NON_INVERTING
CLR_BIT(TCCR0,4);
     bda:	a3 e5       	ldi	r26, 0x53	; 83
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 e5       	ldi	r30, 0x53	; 83
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8f 7e       	andi	r24, 0xEF	; 239
     be6:	8c 93       	st	X, r24
SET_BIT(TCCR0,5);
     be8:	a3 e5       	ldi	r26, 0x53	; 83
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e3 e5       	ldi	r30, 0x53	; 83
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 62       	ori	r24, 0x20	; 32
     bf4:	8c 93       	st	X, r24
#elif CLK_SOURCE_MODE==PRESCALAR_OVER_256
CLR_BIT(TCCR0,0);
CLR_BIT(TCCR0,1);
SET_BIT(TCCR0,2);
#elif CLK_SOURCE_MODE==PRESCALAR_OVER_1024
SET_BIT(TCCR0,0);
     bf6:	a3 e5       	ldi	r26, 0x53	; 83
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e3 e5       	ldi	r30, 0x53	; 83
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	8c 93       	st	X, r24
CLR_BIT(TCCR0,1);
     c04:	a3 e5       	ldi	r26, 0x53	; 83
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e3 e5       	ldi	r30, 0x53	; 83
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8d 7f       	andi	r24, 0xFD	; 253
     c10:	8c 93       	st	X, r24
SET_BIT(TCCR0,2);
     c12:	a3 e5       	ldi	r26, 0x53	; 83
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e3 e5       	ldi	r30, 0x53	; 83
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	8c 93       	st	X, r24
SET_BIT(TCCR0,0);
SET_BIT(TCCR0,1);
SET_BIT(TCCR0,2);
#endif

}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <timer_setpreload>:
void timer_setpreload(u8 copy_u8preload){
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	0f 92       	push	r0
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	89 83       	std	Y+1, r24	; 0x01

TCCR0=copy_u8preload;
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	80 83       	st	Z, r24

}
     c3a:	0f 90       	pop	r0
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <timer_setctc>:
void timer_setctc(u8 copu_u8ocr){
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	0f 92       	push	r0
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	89 83       	std	Y+1, r24	; 0x01
OCR0=copu_u8ocr;
     c4e:	ec e5       	ldi	r30, 0x5C	; 92
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	80 83       	st	Z, r24

}
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <timer_overflow_callback>:
void timer_overflow_callback (void (*ptr_overflowapp)(void)){
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <timer_overflow_callback+0x6>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_overflowapp!=NULL){
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	61 f0       	breq	.+24     	; 0xc8c <timer_overflow_callback+0x2e>
	if(glob_overflowisr_ptr==NULL)
     c74:	80 91 8c 00 	lds	r24, 0x008C
     c78:	90 91 8d 00 	lds	r25, 0x008D
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	31 f4       	brne	.+12     	; 0xc8c <timer_overflow_callback+0x2e>
	{
		glob_overflowisr_ptr=ptr_overflowapp;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	90 93 8d 00 	sts	0x008D, r25
     c88:	80 93 8c 00 	sts	0x008C, r24
	}
	}

}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <timer_CTC_callback>:
void timer_CTC_callback (void (*ptr_ctcapp)(void)){
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <timer_CTC_callback+0x6>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
	if(ptr_ctcapp!=NULL){
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	61 f0       	breq	.+24     	; 0xcc4 <timer_CTC_callback+0x2e>
	if(glob_ctcisr_ptr==NULL)
     cac:	80 91 8e 00 	lds	r24, 0x008E
     cb0:	90 91 8f 00 	lds	r25, 0x008F
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <timer_CTC_callback+0x2e>
	{
		glob_ctcisr_ptr=ptr_ctcapp;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	90 93 8f 00 	sts	0x008F, r25
     cc0:	80 93 8e 00 	sts	0x008E, r24
	}
	}


}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <__vector_10>:
//ctc isr
void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
	if(glob_ctcisr_ptr!=NULL)
     cf8:	80 91 8e 00 	lds	r24, 0x008E
     cfc:	90 91 8f 00 	lds	r25, 0x008F
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	29 f0       	breq	.+10     	; 0xd0e <__vector_10+0x40>
	{
		glob_ctcisr_ptr();
     d04:	e0 91 8e 00 	lds	r30, 0x008E
     d08:	f0 91 8f 00 	lds	r31, 0x008F
     d0c:	09 95       	icall
	}
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	7f 91       	pop	r23
     d20:	6f 91       	pop	r22
     d22:	5f 91       	pop	r21
     d24:	4f 91       	pop	r20
     d26:	3f 91       	pop	r19
     d28:	2f 91       	pop	r18
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <__vector_11>:

//overflow isr
void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{if(glob_overflowisr_ptr!=NULL)
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	80 91 8c 00 	lds	r24, 0x008C
     d62:	90 91 8d 00 	lds	r25, 0x008D
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	29 f0       	breq	.+10     	; 0xd74 <__vector_11+0x40>
{
	glob_overflowisr_ptr();
     d6a:	e0 91 8c 00 	lds	r30, 0x008C
     d6e:	f0 91 8d 00 	lds	r31, 0x008D
     d72:	09 95       	icall
}

}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <mdio_setportdirection>:

#include "../../lib/BIT_MATH.h"
#include "../../lib/STD_TYPES.h"
#include "mdio_interface.h"
#include "mdio_private.h"
void mdio_setportdirection (u8 copy_u8portnumber, u8 copy_u8portdir){
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <mdio_setportdirection+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <mdio_setportdirection+0x8>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	6a 83       	std	Y+2, r22	; 0x02
if((copy_u8portdir==PORT_OUTPUT)||(copy_u8portdir==PORT_INPUT)){
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	8f 3f       	cpi	r24, 0xFF	; 255
     dae:	19 f0       	breq	.+6      	; 0xdb6 <mdio_setportdirection+0x1c>
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 23       	and	r24, r24
     db4:	91 f5       	brne	.+100    	; 0xe1a <mdio_setportdirection+0x80>
	/*valid port direction*/

	switch(copy_u8portnumber)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3c 83       	std	Y+4, r19	; 0x04
     dbe:	2b 83       	std	Y+3, r18	; 0x03
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	9c 81       	ldd	r25, Y+4	; 0x04
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	d1 f0       	breq	.+52     	; 0xdfe <mdio_setportdirection+0x64>
     dca:	2b 81       	ldd	r18, Y+3	; 0x03
     dcc:	3c 81       	ldd	r19, Y+4	; 0x04
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <mdio_setportdirection+0x44>
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9c 81       	ldd	r25, Y+4	; 0x04
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	61 f0       	breq	.+24     	; 0xdf4 <mdio_setportdirection+0x5a>
     ddc:	1e c0       	rjmp	.+60     	; 0xe1a <mdio_setportdirection+0x80>
     dde:	2b 81       	ldd	r18, Y+3	; 0x03
     de0:	3c 81       	ldd	r19, Y+4	; 0x04
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	81 f0       	breq	.+32     	; 0xe08 <mdio_setportdirection+0x6e>
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	81 f0       	breq	.+32     	; 0xe12 <mdio_setportdirection+0x78>
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <mdio_setportdirection+0x80>
	{
	case MDIO_PORTA:
		DDRA=copy_u8portdir;
     df4:	ea e3       	ldi	r30, 0x3A	; 58
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	80 83       	st	Z, r24
     dfc:	0e c0       	rjmp	.+28     	; 0xe1a <mdio_setportdirection+0x80>
		break;
case MDIO_PORTB:
			DDRB=copy_u8portdir;
     dfe:	e7 e3       	ldi	r30, 0x37	; 55
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	80 83       	st	Z, r24
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <mdio_setportdirection+0x80>
		break;
	case MDIO_PORTC:
				DDRC=copy_u8portdir;
     e08:	e4 e3       	ldi	r30, 0x34	; 52
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	80 83       	st	Z, r24
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <mdio_setportdirection+0x80>
			break;
	case MDIO_PORTD:
				DDRD=copy_u8portdir;
     e12:	e1 e3       	ldi	r30, 0x31	; 49
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	80 83       	st	Z, r24
	}
}
else {
	/*not valid */
}
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <mdio_setbindirection>:


void mdio_setbindirection (u8 copy_u8binnumber,u8 copy_u8portnumber, u8 copy_u8bindir){
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <mdio_setbindirection+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <mdio_setbindirection+0x8>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	6a 83       	std	Y+2, r22	; 0x02
     e3a:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8binnumber>=0)&&(copy_u8binnumber<8)){
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	08 f0       	brcs	.+2      	; 0xe44 <mdio_setbindirection+0x1c>
     e42:	e0 c0       	rjmp	.+448    	; 0x1004 <mdio_setbindirection+0x1dc>
	switch(copy_u8portnumber)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3d 83       	std	Y+5, r19	; 0x05
     e4c:	2c 83       	std	Y+4, r18	; 0x04
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	9d 81       	ldd	r25, Y+5	; 0x05
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <mdio_setbindirection+0x32>
     e58:	47 c0       	rjmp	.+142    	; 0xee8 <mdio_setbindirection+0xc0>
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	2c f4       	brge	.+10     	; 0xe6e <mdio_setbindirection+0x46>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	71 f0       	breq	.+28     	; 0xe88 <mdio_setbindirection+0x60>
     e6c:	cb c0       	rjmp	.+406    	; 0x1004 <mdio_setbindirection+0x1dc>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <mdio_setbindirection+0x52>
     e78:	67 c0       	rjmp	.+206    	; 0xf48 <mdio_setbindirection+0x120>
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	91 05       	cpc	r25, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <mdio_setbindirection+0x5e>
     e84:	91 c0       	rjmp	.+290    	; 0xfa8 <mdio_setbindirection+0x180>
     e86:	be c0       	rjmp	.+380    	; 0x1004 <mdio_setbindirection+0x1dc>
	{case MDIO_PORTA:
		if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRA,copy_u8binnumber) ;}
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <mdio_setbindirection+0x8e>
     e8e:	aa e3       	ldi	r26, 0x3A	; 58
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e3       	ldi	r30, 0x3A	; 58
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <mdio_setbindirection+0x84>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <mdio_setbindirection+0x80>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	a7 c0       	rjmp	.+334    	; 0x1004 <mdio_setbindirection+0x1dc>
		else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRA,copy_u8binnumber);}
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	88 23       	and	r24, r24
     eba:	09 f0       	breq	.+2      	; 0xebe <mdio_setbindirection+0x96>
     ebc:	a3 c0       	rjmp	.+326    	; 0x1004 <mdio_setbindirection+0x1dc>
     ebe:	aa e3       	ldi	r26, 0x3A	; 58
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	ea e3       	ldi	r30, 0x3A	; 58
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <mdio_setbindirection+0xb4>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <mdio_setbindirection+0xb0>
     ee0:	80 95       	com	r24
     ee2:	84 23       	and	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	8e c0       	rjmp	.+284    	; 0x1004 <mdio_setbindirection+0x1dc>
		else {/*invalid*/}
		break;

	case MDIO_PORTB:
			if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRB,copy_u8binnumber) ;}
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f4       	brne	.+40     	; 0xf16 <mdio_setbindirection+0xee>
     eee:	a7 e3       	ldi	r26, 0x37	; 55
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e3       	ldi	r30, 0x37	; 55
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <mdio_setbindirection+0xe4>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <mdio_setbindirection+0xe0>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	77 c0       	rjmp	.+238    	; 0x1004 <mdio_setbindirection+0x1dc>
			else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRB,copy_u8binnumber);}
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 23       	and	r24, r24
     f1a:	09 f0       	breq	.+2      	; 0xf1e <mdio_setbindirection+0xf6>
     f1c:	73 c0       	rjmp	.+230    	; 0x1004 <mdio_setbindirection+0x1dc>
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <mdio_setbindirection+0x114>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <mdio_setbindirection+0x110>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	5e c0       	rjmp	.+188    	; 0x1004 <mdio_setbindirection+0x1dc>
			else {/*invalid*/}
			break;

	case MDIO_PORTC:
			if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRC,copy_u8binnumber) ;}
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	a1 f4       	brne	.+40     	; 0xf76 <mdio_setbindirection+0x14e>
     f4e:	a4 e3       	ldi	r26, 0x34	; 52
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e4 e3       	ldi	r30, 0x34	; 52
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <mdio_setbindirection+0x144>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <mdio_setbindirection+0x140>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	47 c0       	rjmp	.+142    	; 0x1004 <mdio_setbindirection+0x1dc>
			else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRC,copy_u8binnumber);}
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 23       	and	r24, r24
     f7a:	09 f0       	breq	.+2      	; 0xf7e <mdio_setbindirection+0x156>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <mdio_setbindirection+0x1dc>
     f7e:	a4 e3       	ldi	r26, 0x34	; 52
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 e3       	ldi	r30, 0x34	; 52
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <mdio_setbindirection+0x174>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <mdio_setbindirection+0x170>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	2e c0       	rjmp	.+92     	; 0x1004 <mdio_setbindirection+0x1dc>
			else {/*invalid*/}
			break;

	case MDIO_PORTD:
			if (copy_u8bindir==BIN_OUTPUT) {SET_BIT(DDRD,copy_u8binnumber) ;}
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <mdio_setbindirection+0x1ae>
     fae:	a1 e3       	ldi	r26, 0x31	; 49
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e1 e3       	ldi	r30, 0x31	; 49
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <mdio_setbindirection+0x1a4>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <mdio_setbindirection+0x1a0>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	17 c0       	rjmp	.+46     	; 0x1004 <mdio_setbindirection+0x1dc>
			else if (copy_u8bindir==BIN_INPUT){CLR_BIT(DDRD,copy_u8binnumber);}
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 23       	and	r24, r24
     fda:	a1 f4       	brne	.+40     	; 0x1004 <mdio_setbindirection+0x1dc>
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <mdio_setbindirection+0x1d2>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <mdio_setbindirection+0x1ce>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
	else {
		/*wrong bin number*/
	}


}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <mdio_setportvalue>:
void mdio_setportvalue      (u8 copy_u8portnumber, u8 copy_portvalue ){
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <mdio_setportvalue+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <mdio_setportvalue+0x8>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02

	if((copy_portvalue==PORT_HIGH)||(copy_portvalue==PORT_LOW)){
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	8f 3f       	cpi	r24, 0xFF	; 255
    1028:	19 f0       	breq	.+6      	; 0x1030 <mdio_setportvalue+0x1c>
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 23       	and	r24, r24
    102e:	91 f5       	brne	.+100    	; 0x1094 <mdio_setportvalue+0x80>
		/*valid port direction*/

		switch(copy_u8portnumber)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3c 83       	std	Y+4, r19	; 0x04
    1038:	2b 83       	std	Y+3, r18	; 0x03
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	91 05       	cpc	r25, r1
    1042:	d1 f0       	breq	.+52     	; 0x1078 <mdio_setportvalue+0x64>
    1044:	2b 81       	ldd	r18, Y+3	; 0x03
    1046:	3c 81       	ldd	r19, Y+4	; 0x04
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	2c f4       	brge	.+10     	; 0x1058 <mdio_setportvalue+0x44>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	61 f0       	breq	.+24     	; 0x106e <mdio_setportvalue+0x5a>
    1056:	1e c0       	rjmp	.+60     	; 0x1094 <mdio_setportvalue+0x80>
    1058:	2b 81       	ldd	r18, Y+3	; 0x03
    105a:	3c 81       	ldd	r19, Y+4	; 0x04
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	81 f0       	breq	.+32     	; 0x1082 <mdio_setportvalue+0x6e>
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	91 05       	cpc	r25, r1
    106a:	81 f0       	breq	.+32     	; 0x108c <mdio_setportvalue+0x78>
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <mdio_setportvalue+0x80>
		{
		case MDIO_PORTA:
			PORTA=copy_portvalue;
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	80 83       	st	Z, r24
    1076:	0e c0       	rjmp	.+28     	; 0x1094 <mdio_setportvalue+0x80>
			break;
case MDIO_PORTB:
				PORTB=copy_portvalue;
    1078:	e8 e3       	ldi	r30, 0x38	; 56
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 83       	st	Z, r24
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <mdio_setportvalue+0x80>
			break;
		case MDIO_PORTC:
					PORTC=copy_portvalue;
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	80 83       	st	Z, r24
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <mdio_setportvalue+0x80>
				break;
		case MDIO_PORTD:
					PORTD=copy_portvalue;
    108c:	e2 e3       	ldi	r30, 0x32	; 50
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	80 83       	st	Z, r24
	}
	else {
		/*not valid */
	}

}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <mdio_setbinvalue>:
void mdio_setbinvalue (u8 copy_u8binnumber,u8 copy_u8portnumber, u8 copy_u8binvalue){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <mdio_setbinvalue+0x6>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <mdio_setbinvalue+0x8>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	6a 83       	std	Y+2, r22	; 0x02
    10b4:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8binnumber>=0)&&(copy_u8binnumber<8)){
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	08 f0       	brcs	.+2      	; 0x10be <mdio_setbinvalue+0x1c>
    10bc:	e0 c0       	rjmp	.+448    	; 0x127e <mdio_setbinvalue+0x1dc>
	switch(copy_u8portnumber)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3d 83       	std	Y+5, r19	; 0x05
    10c6:	2c 83       	std	Y+4, r18	; 0x04
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <mdio_setbinvalue+0x32>
    10d2:	47 c0       	rjmp	.+142    	; 0x1162 <mdio_setbinvalue+0xc0>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <mdio_setbinvalue+0x46>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	71 f0       	breq	.+28     	; 0x1102 <mdio_setbinvalue+0x60>
    10e6:	cb c0       	rjmp	.+406    	; 0x127e <mdio_setbinvalue+0x1dc>
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <mdio_setbinvalue+0x52>
    10f2:	67 c0       	rjmp	.+206    	; 0x11c2 <mdio_setbinvalue+0x120>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <mdio_setbinvalue+0x5e>
    10fe:	91 c0       	rjmp	.+290    	; 0x1222 <mdio_setbinvalue+0x180>
    1100:	be c0       	rjmp	.+380    	; 0x127e <mdio_setbinvalue+0x1dc>
	{case MDIO_PORTA:
		if (copy_u8binvalue==BIN_HIGH) {SET_BIT(PORTA,copy_u8binnumber) ;}
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	a1 f4       	brne	.+40     	; 0x1130 <mdio_setbinvalue+0x8e>
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <mdio_setbinvalue+0x84>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <mdio_setbinvalue+0x80>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	a7 c0       	rjmp	.+334    	; 0x127e <mdio_setbinvalue+0x1dc>
		else if (copy_u8binvalue==BIN_LOW){CLR_BIT(PORTA,copy_u8binnumber);}
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 23       	and	r24, r24
    1134:	09 f0       	breq	.+2      	; 0x1138 <mdio_setbinvalue+0x96>
    1136:	a3 c0       	rjmp	.+326    	; 0x127e <mdio_setbinvalue+0x1dc>
    1138:	ab e3       	ldi	r26, 0x3B	; 59
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <mdio_setbinvalue+0xb4>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <mdio_setbinvalue+0xb0>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	8e c0       	rjmp	.+284    	; 0x127e <mdio_setbinvalue+0x1dc>
		else {/*invalid*/}
		break;

	case MDIO_PORTB:
			if (copy_u8binvalue==BIN_HIGH) {SET_BIT(PORTB,copy_u8binnumber) ;}
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	a1 f4       	brne	.+40     	; 0x1190 <mdio_setbinvalue+0xee>
    1168:	a8 e3       	ldi	r26, 0x38	; 56
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e8 e3       	ldi	r30, 0x38	; 56
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <mdio_setbinvalue+0xe4>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <mdio_setbinvalue+0xe0>
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	77 c0       	rjmp	.+238    	; 0x127e <mdio_setbinvalue+0x1dc>
			else if (copy_u8binvalue==BIN_LOW){CLR_BIT(PORTB,copy_u8binnumber);}
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 23       	and	r24, r24
    1194:	09 f0       	breq	.+2      	; 0x1198 <mdio_setbinvalue+0xf6>
    1196:	73 c0       	rjmp	.+230    	; 0x127e <mdio_setbinvalue+0x1dc>
    1198:	a8 e3       	ldi	r26, 0x38	; 56
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <mdio_setbinvalue+0x114>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <mdio_setbinvalue+0x110>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	5e c0       	rjmp	.+188    	; 0x127e <mdio_setbinvalue+0x1dc>
			else {/*invalid*/}
			break;

	case MDIO_PORTC:
			if (copy_u8binvalue==BIN_HIGH) {SET_BIT(PORTC,copy_u8binnumber) ;}
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	a1 f4       	brne	.+40     	; 0x11f0 <mdio_setbinvalue+0x14e>
    11c8:	a5 e3       	ldi	r26, 0x35	; 53
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e5 e3       	ldi	r30, 0x35	; 53
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <mdio_setbinvalue+0x144>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <mdio_setbinvalue+0x140>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	47 c0       	rjmp	.+142    	; 0x127e <mdio_setbinvalue+0x1dc>
			else if (copy_u8binvalue==BIN_LOW){CLR_BIT(PORTC,copy_u8binnumber);}
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 23       	and	r24, r24
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <mdio_setbinvalue+0x156>
    11f6:	43 c0       	rjmp	.+134    	; 0x127e <mdio_setbinvalue+0x1dc>
    11f8:	a5 e3       	ldi	r26, 0x35	; 53
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e5 e3       	ldi	r30, 0x35	; 53
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <mdio_setbinvalue+0x174>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <mdio_setbinvalue+0x170>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	2e c0       	rjmp	.+92     	; 0x127e <mdio_setbinvalue+0x1dc>
			else {/*invalid*/}
			break;

	case MDIO_PORTD:
			if (copy_u8binvalue==BIN_HIGH) {SET_BIT(PORTD,copy_u8binnumber) ;}
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	a1 f4       	brne	.+40     	; 0x1250 <mdio_setbinvalue+0x1ae>
    1228:	a2 e3       	ldi	r26, 0x32	; 50
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e2 e3       	ldi	r30, 0x32	; 50
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <mdio_setbinvalue+0x1a4>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <mdio_setbinvalue+0x1a0>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	17 c0       	rjmp	.+46     	; 0x127e <mdio_setbinvalue+0x1dc>
			else if (copy_u8binvalue==BIN_LOW){CLR_BIT(PORTD,copy_u8binnumber);}
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	88 23       	and	r24, r24
    1254:	a1 f4       	brne	.+40     	; 0x127e <mdio_setbinvalue+0x1dc>
    1256:	a2 e3       	ldi	r26, 0x32	; 50
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e2 e3       	ldi	r30, 0x32	; 50
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <mdio_setbinvalue+0x1d2>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <mdio_setbinvalue+0x1ce>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24





}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <mdio_Readport>:

void mdio_Readport(u8 copy_u8portnumber,u8 *p_u8portreading){
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <mdio_Readport+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <mdio_Readport+0x8>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	7b 83       	std	Y+3, r23	; 0x03
    12a0:	6a 83       	std	Y+2, r22	; 0x02
	if (p_u8portreading!=NULL){
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	d1 f1       	breq	.+116    	; 0x131e <mdio_Readport+0x90>
switch (copy_u8portnumber)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2c 83       	std	Y+4, r18	; 0x04
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	e1 f0       	breq	.+56     	; 0x12f6 <mdio_Readport+0x68>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <mdio_Readport+0x44>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <mdio_Readport+0x5a>
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <mdio_Readport+0x90>
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	a1 f0       	breq	.+40     	; 0x1304 <mdio_Readport+0x76>
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <mdio_Readport+0x84>
    12e6:	1b c0       	rjmp	.+54     	; 0x131e <mdio_Readport+0x90>
{
case MDIO_PORTA:
	*p_u8portreading=PINA;
    12e8:	e9 e3       	ldi	r30, 0x39	; 57
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	ea 81       	ldd	r30, Y+2	; 0x02
    12f0:	fb 81       	ldd	r31, Y+3	; 0x03
    12f2:	80 83       	st	Z, r24
    12f4:	14 c0       	rjmp	.+40     	; 0x131e <mdio_Readport+0x90>
	break;
case MDIO_PORTB:
	*p_u8portreading=PINB;
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	ea 81       	ldd	r30, Y+2	; 0x02
    12fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1300:	80 83       	st	Z, r24
    1302:	0d c0       	rjmp	.+26     	; 0x131e <mdio_Readport+0x90>
	break;
case MDIO_PORTC:
	*p_u8portreading=PINC;
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	ea 81       	ldd	r30, Y+2	; 0x02
    130c:	fb 81       	ldd	r31, Y+3	; 0x03
    130e:	80 83       	st	Z, r24
    1310:	06 c0       	rjmp	.+12     	; 0x131e <mdio_Readport+0x90>
	break;
case MDIO_PORTD:
	*p_u8portreading=PIND;
    1312:	e0 e3       	ldi	r30, 0x30	; 48
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	ea 81       	ldd	r30, Y+2	; 0x02
    131a:	fb 81       	ldd	r31, Y+3	; 0x03
    131c:	80 83       	st	Z, r24
	}
	else {
	//null pointer
	}

}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <mdio_Readbin>:
void mdio_Readbin  (u8 copy_u8binnumber,u8 copy_u8portnumber, u8 * p_u8portreading ){
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <mdio_Readbin+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <mdio_Readbin+0x8>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <mdio_Readbin+0xa>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
    1340:	5c 83       	std	Y+4, r21	; 0x04
    1342:	4b 83       	std	Y+3, r20	; 0x03

	if ((copy_u8binnumber>=0)&&(copy_u8binnumber<8)){
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <mdio_Readbin+0x1e>
    134a:	70 c0       	rjmp	.+224    	; 0x142c <mdio_Readbin+0xfe>
	switch(copy_u8portnumber)
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3e 83       	std	Y+6, r19	; 0x06
    1354:	2d 83       	std	Y+5, r18	; 0x05
    1356:	4d 81       	ldd	r20, Y+5	; 0x05
    1358:	5e 81       	ldd	r21, Y+6	; 0x06
    135a:	41 30       	cpi	r20, 0x01	; 1
    135c:	51 05       	cpc	r21, r1
    135e:	59 f1       	breq	.+86     	; 0x13b6 <mdio_Readbin+0x88>
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	91 05       	cpc	r25, r1
    1368:	34 f4       	brge	.+12     	; 0x1376 <mdio_Readbin+0x48>
    136a:	2d 81       	ldd	r18, Y+5	; 0x05
    136c:	3e 81       	ldd	r19, Y+6	; 0x06
    136e:	21 15       	cp	r18, r1
    1370:	31 05       	cpc	r19, r1
    1372:	69 f0       	breq	.+26     	; 0x138e <mdio_Readbin+0x60>
    1374:	5b c0       	rjmp	.+182    	; 0x142c <mdio_Readbin+0xfe>
    1376:	4d 81       	ldd	r20, Y+5	; 0x05
    1378:	5e 81       	ldd	r21, Y+6	; 0x06
    137a:	42 30       	cpi	r20, 0x02	; 2
    137c:	51 05       	cpc	r21, r1
    137e:	79 f1       	breq	.+94     	; 0x13de <mdio_Readbin+0xb0>
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <mdio_Readbin+0x5e>
    138a:	3d c0       	rjmp	.+122    	; 0x1406 <mdio_Readbin+0xd8>
    138c:	4f c0       	rjmp	.+158    	; 0x142c <mdio_Readbin+0xfe>
	{case MDIO_PORTA:
		*p_u8portreading=GET_BIT(PINA,copy_u8binnumber);
    138e:	e9 e3       	ldi	r30, 0x39	; 57
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <mdio_Readbin+0x78>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <mdio_Readbin+0x74>
    13aa:	ca 01       	movw	r24, r20
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	eb 81       	ldd	r30, Y+3	; 0x03
    13b0:	fc 81       	ldd	r31, Y+4	; 0x04
    13b2:	80 83       	st	Z, r24
    13b4:	3b c0       	rjmp	.+118    	; 0x142c <mdio_Readbin+0xfe>
		break;

	case MDIO_PORTB:
		*p_u8portreading=GET_BIT(PINB,copy_u8binnumber);
    13b6:	e6 e3       	ldi	r30, 0x36	; 54
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <mdio_Readbin+0xa0>
    13ca:	55 95       	asr	r21
    13cc:	47 95       	ror	r20
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <mdio_Readbin+0x9c>
    13d2:	ca 01       	movw	r24, r20
    13d4:	81 70       	andi	r24, 0x01	; 1
    13d6:	eb 81       	ldd	r30, Y+3	; 0x03
    13d8:	fc 81       	ldd	r31, Y+4	; 0x04
    13da:	80 83       	st	Z, r24
    13dc:	27 c0       	rjmp	.+78     	; 0x142c <mdio_Readbin+0xfe>

			break;

	case MDIO_PORTC:
		*p_u8portreading=GET_BIT(PINC,copy_u8binnumber);
    13de:	e3 e3       	ldi	r30, 0x33	; 51
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a9 01       	movw	r20, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <mdio_Readbin+0xc8>
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <mdio_Readbin+0xc4>
    13fa:	ca 01       	movw	r24, r20
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1400:	fc 81       	ldd	r31, Y+4	; 0x04
    1402:	80 83       	st	Z, r24
    1404:	13 c0       	rjmp	.+38     	; 0x142c <mdio_Readbin+0xfe>
			break;

	case MDIO_PORTD:
		*p_u8portreading=GET_BIT(PIND,copy_u8binnumber);
    1406:	e0 e3       	ldi	r30, 0x30	; 48
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <mdio_Readbin+0xf0>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <mdio_Readbin+0xec>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	eb 81       	ldd	r30, Y+3	; 0x03
    1428:	fc 81       	ldd	r31, Y+4	; 0x04
    142a:	80 83       	st	Z, r24

	else {
		/*wrongnumber*/
	}

}
    142c:	26 96       	adiw	r28, 0x06	; 6
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <mdio_togglepin>:
 void mdio_togglepin(u8 copy_u8binnumber,u8 copy_u8portnumber ){
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <mdio_togglepin+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <mdio_togglepin+0x8>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8binnumber>=0)&&(copy_u8binnumber<8)){
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	88 30       	cpi	r24, 0x08	; 8
    1452:	08 f0       	brcs	.+2      	; 0x1456 <mdio_togglepin+0x18>
    1454:	6e c0       	rjmp	.+220    	; 0x1532 <mdio_togglepin+0xf4>
	switch(copy_u8portnumber)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	49 f1       	breq	.+82     	; 0x14bc <mdio_togglepin+0x7e>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <mdio_togglepin+0x40>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <mdio_togglepin+0x56>
    147c:	5a c0       	rjmp	.+180    	; 0x1532 <mdio_togglepin+0xf4>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	71 f1       	breq	.+92     	; 0x14e4 <mdio_togglepin+0xa6>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	e9 f1       	breq	.+122    	; 0x150c <mdio_togglepin+0xce>
    1492:	4f c0       	rjmp	.+158    	; 0x1532 <mdio_togglepin+0xf4>
	{case MDIO_PORTA:
		TOGGLE_BIT(PORTA,copy_u8binnumber);
    1494:	ab e3       	ldi	r26, 0x3B	; 59
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <mdio_togglepin+0x74>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <mdio_togglepin+0x70>
    14b6:	84 27       	eor	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	3b c0       	rjmp	.+118    	; 0x1532 <mdio_togglepin+0xf4>
		break;

	case MDIO_PORTB:
		TOGGLE_BIT(PORTB,copy_u8binnumber);
    14bc:	a8 e3       	ldi	r26, 0x38	; 56
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e8 e3       	ldi	r30, 0x38	; 56
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <mdio_togglepin+0x9c>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <mdio_togglepin+0x98>
    14de:	84 27       	eor	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <mdio_togglepin+0xf4>
			break;

	case MDIO_PORTC:
		TOGGLE_BIT(PORTC,copy_u8binnumber);
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <mdio_togglepin+0xc4>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <mdio_togglepin+0xc0>
    1506:	84 27       	eor	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <mdio_togglepin+0xf4>
			break;

	case MDIO_PORTD:
		TOGGLE_BIT(PORTD,copy_u8binnumber);
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <mdio_togglepin+0xec>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <mdio_togglepin+0xe8>
    152e:	84 27       	eor	r24, r20
    1530:	8c 93       	st	X, r24
	}

	else {
		/*wrongnumber*/
	}
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <mdio_setnibblevalue>:
 void mdio_setnibblevalue (u8 copy_u8pinstart, u8 copy_u8portnumber ,u8 copy_u8value){
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <mdio_setnibblevalue+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <mdio_setnibblevalue+0x8>
    1548:	00 d0       	rcall	.+0      	; 0x154a <mdio_setnibblevalue+0xa>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	8a 83       	std	Y+2, r24	; 0x02
    1550:	6b 83       	std	Y+3, r22	; 0x03
    1552:	4c 83       	std	Y+4, r20	; 0x04
	 u8 loc_u8value =copy_u8value;
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	89 83       	std	Y+1, r24	; 0x01
	 //handling of the value
	 loc_u8value=((loc_u8value&(0x0f))<<copy_u8pinstart);
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	9c 01       	movw	r18, r24
    1560:	2f 70       	andi	r18, 0x0F	; 15
    1562:	30 70       	andi	r19, 0x00	; 0
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <mdio_setnibblevalue+0x32>
    156e:	44 0f       	add	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	8a 95       	dec	r24
    1574:	e2 f7       	brpl	.-8      	; 0x156e <mdio_setnibblevalue+0x2e>
    1576:	ca 01       	movw	r24, r20
    1578:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8pinstart<=4)&&(copy_u8pinstart>0)){
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	08 f0       	brcs	.+2      	; 0x1582 <mdio_setnibblevalue+0x42>
    1580:	99 c0       	rjmp	.+306    	; 0x16b4 <mdio_setnibblevalue+0x174>
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <mdio_setnibblevalue+0x4a>
    1588:	95 c0       	rjmp	.+298    	; 0x16b4 <mdio_setnibblevalue+0x174>
	switch (	copy_u8portnumber){
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3e 83       	std	Y+6, r19	; 0x06
    1592:	2d 83       	std	Y+5, r18	; 0x05
    1594:	4d 81       	ldd	r20, Y+5	; 0x05
    1596:	5e 81       	ldd	r21, Y+6	; 0x06
    1598:	41 30       	cpi	r20, 0x01	; 1
    159a:	51 05       	cpc	r21, r1
    159c:	a9 f1       	breq	.+106    	; 0x1608 <mdio_setnibblevalue+0xc8>
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	34 f4       	brge	.+12     	; 0x15b4 <mdio_setnibblevalue+0x74>
    15a8:	2d 81       	ldd	r18, Y+5	; 0x05
    15aa:	3e 81       	ldd	r19, Y+6	; 0x06
    15ac:	21 15       	cp	r18, r1
    15ae:	31 05       	cpc	r19, r1
    15b0:	71 f0       	breq	.+28     	; 0x15ce <mdio_setnibblevalue+0x8e>
    15b2:	80 c0       	rjmp	.+256    	; 0x16b4 <mdio_setnibblevalue+0x174>
    15b4:	4d 81       	ldd	r20, Y+5	; 0x05
    15b6:	5e 81       	ldd	r21, Y+6	; 0x06
    15b8:	42 30       	cpi	r20, 0x02	; 2
    15ba:	51 05       	cpc	r21, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <mdio_setnibblevalue+0x80>
    15be:	41 c0       	rjmp	.+130    	; 0x1642 <mdio_setnibblevalue+0x102>
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <mdio_setnibblevalue+0x8c>
    15ca:	58 c0       	rjmp	.+176    	; 0x167c <mdio_setnibblevalue+0x13c>
    15cc:	73 c0       	rjmp	.+230    	; 0x16b4 <mdio_setnibblevalue+0x174>
	case MDIO_PORTA :
		//mask port A
		PORTA&=(~((0x0f)<<copy_u8pinstart));
    15ce:	ab e3       	ldi	r26, 0x3B	; 59
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	eb e3       	ldi	r30, 0x3B	; 59
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	8f e0       	ldi	r24, 0x0F	; 15
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <mdio_setnibblevalue+0xac>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <mdio_setnibblevalue+0xa8>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
		PORTA|=loc_u8value;
    15f6:	ab e3       	ldi	r26, 0x3B	; 59
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	90 81       	ld	r25, Z
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	89 2b       	or	r24, r25
    1604:	8c 93       	st	X, r24
    1606:	56 c0       	rjmp	.+172    	; 0x16b4 <mdio_setnibblevalue+0x174>
		break;

	case MDIO_PORTB :
		//mask port B
				PORTB&=(~((0x0f)<<copy_u8pinstart));
    1608:	a8 e3       	ldi	r26, 0x38	; 56
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e8 e3       	ldi	r30, 0x38	; 56
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8f e0       	ldi	r24, 0x0F	; 15
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <mdio_setnibblevalue+0xe6>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <mdio_setnibblevalue+0xe2>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
				PORTB|=loc_u8value;
    1630:	a8 e3       	ldi	r26, 0x38	; 56
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e8 e3       	ldi	r30, 0x38	; 56
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	90 81       	ld	r25, Z
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	89 2b       	or	r24, r25
    163e:	8c 93       	st	X, r24
    1640:	39 c0       	rjmp	.+114    	; 0x16b4 <mdio_setnibblevalue+0x174>
			break;
	case MDIO_PORTC :
		//mask port C
				PORTC&=(~((0x0f)<<copy_u8pinstart));
    1642:	a5 e3       	ldi	r26, 0x35	; 53
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	8f e0       	ldi	r24, 0x0F	; 15
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <mdio_setnibblevalue+0x120>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <mdio_setnibblevalue+0x11c>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
				PORTC|=loc_u8value;
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	90 81       	ld	r25, Z
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	89 2b       	or	r24, r25
    1678:	8c 93       	st	X, r24
    167a:	1c c0       	rjmp	.+56     	; 0x16b4 <mdio_setnibblevalue+0x174>
			break;
	case MDIO_PORTD :

		//mask port D
				PORTD&=(~((0x0f)<<copy_u8pinstart));
    167c:	a2 e3       	ldi	r26, 0x32	; 50
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8f e0       	ldi	r24, 0x0F	; 15
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <mdio_setnibblevalue+0x15a>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <mdio_setnibblevalue+0x156>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
				PORTD|=loc_u8value;
    16a4:	a2 e3       	ldi	r26, 0x32	; 50
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e2 e3       	ldi	r30, 0x32	; 50
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	90 81       	ld	r25, Z
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	89 2b       	or	r24, r25
    16b2:	8c 93       	st	X, r24
	else {
		//wrong bin start number
	}


 }
    16b4:	26 96       	adiw	r28, 0x06	; 6
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <MGIE_enable>:
 */
#include "../../lib/BIT_MATH.h"
#include "../../lib/STD_TYPES.h"
#include "../../MCAL/mdio/mdio_interface.h"
#include "../MGIE/private.h"
void MGIE_enable(void){
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,7 );
    16ce:	af e5       	ldi	r26, 0x5F	; 95
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ef e5       	ldi	r30, 0x5F	; 95
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	80 68       	ori	r24, 0x80	; 128
    16da:	8c 93       	st	X, r24



}
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <MGIE_disable>:
void MGIE_disable(void){
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62

CLR_BIT(SREG,7);
    16ea:	af e5       	ldi	r26, 0x5F	; 95
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ef e5       	ldi	r30, 0x5F	; 95
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	8c 93       	st	X, r24

}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <MEXIT_callback>:
#include "../../MCAL/mdio/mdio_interface.h"
#include"../MEXTI/private.h"
#include"config.h"
//GLOBAL pointer to function  to not violate the layer arch
void (*Gptr)(void)=NULL;
void MEXIT_callback(void(loc_Ptrtofun)(void)){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <MEXIT_callback+0x6>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
	if(loc_Ptrtofun!=NULL){
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	31 f0       	breq	.+12     	; 0x1720 <MEXIT_callback+0x22>
		Gptr=loc_Ptrtofun;
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	90 93 91 00 	sts	0x0091, r25
    171c:	80 93 90 00 	sts	0x0090, r24
	}

}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    172a:	1f 92       	push	r1
    172c:	0f 92       	push	r0
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	0f 92       	push	r0
    1732:	11 24       	eor	r1, r1
    1734:	2f 93       	push	r18
    1736:	3f 93       	push	r19
    1738:	4f 93       	push	r20
    173a:	5f 93       	push	r21
    173c:	6f 93       	push	r22
    173e:	7f 93       	push	r23
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	if(Gptr!=NULL){
    1754:	80 91 90 00 	lds	r24, 0x0090
    1758:	90 91 91 00 	lds	r25, 0x0091
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	29 f0       	breq	.+10     	; 0x176a <__vector_1+0x40>


		Gptr();
    1760:	e0 91 90 00 	lds	r30, 0x0090
    1764:	f0 91 91 00 	lds	r31, 0x0091
    1768:	09 95       	icall
}
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <MEXTI0_init>:

void MEXTI0_init(){
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
#if sense_control_state  ==MEXTI_LOW_LEVEL

	CLR_BIT(MCUCR,0);
    1798:	a5 e5       	ldi	r26, 0x55	; 85
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e5       	ldi	r30, 0x55	; 85
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8e 7f       	andi	r24, 0xFE	; 254
    17a4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8d 7f       	andi	r24, 0xFD	; 253
    17b2:	8c 93       	st	X, r24
				SET_BIT(MCUCR,1);
#elif 	sense_control_state == MEXTI_FALLING_LEVEL
				SET_BIT(MCUCR,0);
								SET_BIT(MCUCR,1);
#endif
 SET_BIT(GICR,6);
    17b4:	ab e5       	ldi	r26, 0x5B	; 91
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e5       	ldi	r30, 0x5B	; 91
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 64       	ori	r24, 0x40	; 64
    17c0:	8c 93       	st	X, r24
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <MEXTI1_init>:
void MEXTI1_init(){}
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <MEXTI2_init>:
void MEXTI2_init(){}
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <key_init>:
#include "../../lib/BIT_MATH.h"
#include"key_interface.h"
#include"key_private.h"
//#include"key_private.h"

void key_init(){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
/*SET bins direction */
	mdio_setbindirection (KEY_COLUMN_0_PIN,KEY_COLUMN_PORT, BIN_OUTPUT);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	62 e0       	ldi	r22, 0x02	; 2
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_COLUMN_1_PIN,KEY_COLUMN_PORT, BIN_OUTPUT);
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_COLUMN_2_PIN,KEY_COLUMN_PORT, BIN_OUTPUT);
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	62 e0       	ldi	r22, 0x02	; 2
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_COLUMN_3_PIN,KEY_COLUMN_PORT, BIN_OUTPUT);
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	62 e0       	ldi	r22, 0x02	; 2
    180e:	41 e0       	ldi	r20, 0x01	; 1
    1810:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_ROW_0_PIN,KEY_ROW_PORT, BIN_INPUT);
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	62 e0       	ldi	r22, 0x02	; 2
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_ROW_1_PIN,KEY_ROW_PORT, BIN_INPUT);
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_ROW_2_PIN,KEY_ROW_PORT, BIN_INPUT);
    1828:	86 e0       	ldi	r24, 0x06	; 6
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	mdio_setbindirection (KEY_ROW_3_PIN,KEY_ROW_PORT, BIN_INPUT);
    1832:	87 e0       	ldi	r24, 0x07	; 7
    1834:	62 e0       	ldi	r22, 0x02	; 2
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
	/*activate pull up resistor */
	mdio_setbinvalue (KEY_ROW_0_PIN,KEY_ROW_PORT,BIN_HIGH);
    183c:	84 e0       	ldi	r24, 0x04	; 4
    183e:	62 e0       	ldi	r22, 0x02	; 2
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	mdio_setbinvalue (KEY_ROW_1_PIN,KEY_ROW_PORT,BIN_HIGH);
    1846:	85 e0       	ldi	r24, 0x05	; 5
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	mdio_setbinvalue (KEY_ROW_2_PIN,KEY_ROW_PORT,BIN_HIGH);
    1850:	86 e0       	ldi	r24, 0x06	; 6
    1852:	62 e0       	ldi	r22, 0x02	; 2
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	mdio_setbinvalue (KEY_ROW_3_PIN,KEY_ROW_PORT,BIN_HIGH);
    185a:	87 e0       	ldi	r24, 0x07	; 7
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
/* deactivate all cloumns*/
	mdio_setbinvalue (KEY_COLUMN_0_PIN,KEY_COLUMN_PORT,BIN_HIGH);
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	62 e0       	ldi	r22, 0x02	; 2
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	mdio_setbinvalue (KEY_COLUMN_0_PIN,KEY_COLUMN_PORT,BIN_HIGH);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	mdio_setbinvalue (KEY_COLUMN_0_PIN,KEY_COLUMN_PORT,BIN_HIGH);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	62 e0       	ldi	r22, 0x02	; 2
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	mdio_setbinvalue (KEY_COLUMN_0_PIN,KEY_COLUMN_PORT,BIN_HIGH);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>

}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <key_get>:
u8 key_get ()
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <key_get+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <key_get+0x8>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
		u8 loc_u8column_count =0;
    189e:	1b 82       	std	Y+3, r1	; 0x03
		u8 loc_u8row_count =0;
    18a0:	1a 82       	std	Y+2, r1	; 0x02
		u8 loc_returnvalue  =KEY_NOPRESS ;
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	89 83       	std	Y+1, r24	; 0x01
		u8  loc_u8binstate=0;
    18a6:	1c 82       	std	Y+4, r1	; 0x04
		for(loc_u8column_count=KEY_COL_START;loc_u8column_count<KEY_COL_END;loc_u8column_count++){
    18a8:	1b 82       	std	Y+3, r1	; 0x03
    18aa:	42 c0       	rjmp	.+132    	; 0x1930 <key_get+0x9e>
			//activate colum
			mdio_setbinvalue(loc_u8column_count,KEY_COLUMN_PORT,BIN_LOW);
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
				for (loc_u8row_count=KEY_ROW_START;loc_u8row_count<KEY_ROW_END;loc_u8row_count++){
    18b6:	84 e0       	ldi	r24, 0x04	; 4
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	2f c0       	rjmp	.+94     	; 0x191a <key_get+0x88>
					mdio_Readbin (loc_u8row_count,KEY_ROW_PORT,&loc_u8binstate);
    18bc:	9e 01       	movw	r18, r28
    18be:	2c 5f       	subi	r18, 0xFC	; 252
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	62 e0       	ldi	r22, 0x02	; 2
    18c6:	a9 01       	movw	r20, r18
    18c8:	0e 94 97 09 	call	0x132e	; 0x132e <mdio_Readbin>
					if (loc_u8binstate==0)
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	88 23       	and	r24, r24
    18d0:	09 f5       	brne	.+66     	; 0x1914 <key_get+0x82>
					{ //return the key value
						loc_returnvalue=KEY_SWITCH_VALUES[loc_u8column_count-KEY_COL_START][loc_u8row_count-KEY_ROW_START] ;
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	48 2f       	mov	r20, r24
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9c 01       	movw	r18, r24
    18e0:	24 50       	subi	r18, 0x04	; 4
    18e2:	30 40       	sbci	r19, 0x00	; 0
    18e4:	ca 01       	movw	r24, r20
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	fc 01       	movw	r30, r24
    18f4:	e4 58       	subi	r30, 0x84	; 132
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <key_get+0x7c>
						while(loc_u8binstate==0){
							mdio_Readbin (loc_u8row_count,KEY_ROW_PORT,&loc_u8binstate);
    18fe:	9e 01       	movw	r18, r28
    1900:	2c 5f       	subi	r18, 0xFC	; 252
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	a9 01       	movw	r20, r18
    190a:	0e 94 97 09 	call	0x132e	; 0x132e <mdio_Readbin>
				for (loc_u8row_count=KEY_ROW_START;loc_u8row_count<KEY_ROW_END;loc_u8row_count++){
					mdio_Readbin (loc_u8row_count,KEY_ROW_PORT,&loc_u8binstate);
					if (loc_u8binstate==0)
					{ //return the key value
						loc_returnvalue=KEY_SWITCH_VALUES[loc_u8column_count-KEY_COL_START][loc_u8row_count-KEY_ROW_START] ;
						while(loc_u8binstate==0){
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	88 23       	and	r24, r24
    1912:	a9 f3       	breq	.-22     	; 0x18fe <key_get+0x6c>
		u8 loc_returnvalue  =KEY_NOPRESS ;
		u8  loc_u8binstate=0;
		for(loc_u8column_count=KEY_COL_START;loc_u8column_count<KEY_COL_END;loc_u8column_count++){
			//activate colum
			mdio_setbinvalue(loc_u8column_count,KEY_COLUMN_PORT,BIN_LOW);
				for (loc_u8row_count=KEY_ROW_START;loc_u8row_count<KEY_ROW_END;loc_u8row_count++){
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	8a 83       	std	Y+2, r24	; 0x02
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	88 30       	cpi	r24, 0x08	; 8
    191e:	70 f2       	brcs	.-100    	; 0x18bc <key_get+0x2a>
					else {

					}
				}
			//deactivate the column
				mdio_setbinvalue(loc_u8column_count,KEY_COLUMN_PORT,BIN_HIGH);
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	62 e0       	ldi	r22, 0x02	; 2
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
{
		u8 loc_u8column_count =0;
		u8 loc_u8row_count =0;
		u8 loc_returnvalue  =KEY_NOPRESS ;
		u8  loc_u8binstate=0;
		for(loc_u8column_count=KEY_COL_START;loc_u8column_count<KEY_COL_END;loc_u8column_count++){
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	08 f4       	brcc	.+2      	; 0x1938 <key_get+0xa6>
    1936:	ba cf       	rjmp	.-140    	; 0x18ac <key_get+0x1a>
					}
				}
			//deactivate the column
				mdio_setbinvalue(loc_u8column_count,KEY_COLUMN_PORT,BIN_HIGH);
		}
	return 	loc_returnvalue;
    1938:	89 81       	ldd	r24, Y+1	; 0x01
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <lcd_writecmd>:
#include "../../lib/STD_TYPES.h"
#include "LCD_CONFIG.h"

#include "LCD_INTERFACE.h"
void lcd_writecmd(u8 copy_u8command)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	6d 97       	sbiw	r28, 0x1d	; 29
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	8d 8f       	std	Y+29, r24	; 0x1d

	//set rw to zero
	mdio_setbinvalue(RW,CONTROL_PORT,BIN_LOW);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	//set rs to zero
	mdio_setbinvalue(RS,CONTROL_PORT,BIN_LOW);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	61 e0       	ldi	r22, 0x01	; 1
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
// set high nibble value to command
	mdio_setnibblevalue(LCD_PIN_START,DATA_PORT,copy_u8command>>4);
    1972:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1974:	98 2f       	mov	r25, r24
    1976:	92 95       	swap	r25
    1978:	9f 70       	andi	r25, 0x0F	; 15
    197a:	84 e0       	ldi	r24, 0x04	; 4
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	49 2f       	mov	r20, r25
    1980:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mdio_setnibblevalue>
	//the falling edge of enable
	mdio_setbinvalue(E,CONTROL_PORT,BIN_HIGH);
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e0       	ldi	r26, 0x00	; 0
    1994:	b0 e4       	ldi	r27, 0x40	; 64
    1996:	89 8f       	std	Y+25, r24	; 0x19
    1998:	9a 8f       	std	Y+26, r25	; 0x1a
    199a:	ab 8f       	std	Y+27, r26	; 0x1b
    199c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	69 8d       	ldd	r22, Y+25	; 0x19
    19a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	4a e7       	ldi	r20, 0x7A	; 122
    19ac:	55 e4       	ldi	r21, 0x45	; 69
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	8d 8b       	std	Y+21, r24	; 0x15
    19b8:	9e 8b       	std	Y+22, r25	; 0x16
    19ba:	af 8b       	std	Y+23, r26	; 0x17
    19bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19be:	6d 89       	ldd	r22, Y+21	; 0x15
    19c0:	7e 89       	ldd	r23, Y+22	; 0x16
    19c2:	8f 89       	ldd	r24, Y+23	; 0x17
    19c4:	98 8d       	ldd	r25, Y+24	; 0x18
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <lcd_writecmd+0x98>
		__ticks = 1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9c 8b       	std	Y+20, r25	; 0x14
    19dc:	8b 8b       	std	Y+19, r24	; 0x13
    19de:	3f c0       	rjmp	.+126    	; 0x1a5e <lcd_writecmd+0x116>
	else if (__tmp > 65535)
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	4c f5       	brge	.+82     	; 0x1a4a <lcd_writecmd+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f8:	69 8d       	ldd	r22, Y+25	; 0x19
    19fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <lcd_writecmd+0xf8>
    1a22:	80 e9       	ldi	r24, 0x90	; 144
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a2a:	89 89       	ldd	r24, Y+17	; 0x11
    1a2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <lcd_writecmd+0xe6>
    1a32:	9a 8b       	std	Y+18, r25	; 0x12
    1a34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	8b 89       	ldd	r24, Y+19	; 0x13
    1a38:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	8b 89       	ldd	r24, Y+19	; 0x13
    1a42:	9c 89       	ldd	r25, Y+20	; 0x14
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <lcd_writecmd+0xda>
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <lcd_writecmd+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	8f 87       	std	Y+15, r24	; 0x0f
    1a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a68:	98 89       	ldd	r25, Y+16	; 0x10
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <lcd_writecmd+0x122>
    1a6e:	98 8b       	std	Y+16, r25	; 0x10
    1a70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	mdio_setbinvalue(E,CONTROL_PORT,BIN_LOW);
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>

	mdio_setnibblevalue(LCD_PIN_START,DATA_PORT,copy_u8command);
    1a7c:	84 e0       	ldi	r24, 0x04	; 4
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1a82:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mdio_setnibblevalue>
	//the falling edge of enable
		mdio_setbinvalue(E,CONTROL_PORT,BIN_HIGH);
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e4       	ldi	r27, 0x40	; 64
    1a98:	8b 87       	std	Y+11, r24	; 0x0b
    1a9a:	9c 87       	std	Y+12, r25	; 0x0c
    1a9c:	ad 87       	std	Y+13, r26	; 0x0d
    1a9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	55 e4       	ldi	r21, 0x45	; 69
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	98 87       	std	Y+8, r25	; 0x08
    1abc:	a9 87       	std	Y+9, r26	; 0x09
    1abe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <lcd_writecmd+0x19a>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <lcd_writecmd+0x218>
	else if (__tmp > 65535)
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <lcd_writecmd+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <lcd_writecmd+0x1fa>
    1b24:	80 e9       	ldi	r24, 0x90	; 144
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <lcd_writecmd+0x1e8>
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <lcd_writecmd+0x1dc>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <lcd_writecmd+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <lcd_writecmd+0x224>
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		mdio_setbinvalue(E,CONTROL_PORT,BIN_LOW);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>

}
    1b7e:	6d 96       	adiw	r28, 0x1d	; 29
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <lcd_init4bit>:
void lcd_init4bit(){
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	c7 54       	subi	r28, 0x47	; 71
    1b9e:	d0 40       	sbci	r29, 0x00	; 0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	fe 01       	movw	r30, r28
    1bac:	ed 5b       	subi	r30, 0xBD	; 189
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 ef       	ldi	r26, 0xF0	; 240
    1bb6:	b1 e4       	ldi	r27, 0x41	; 65
    1bb8:	80 83       	st	Z, r24
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	a2 83       	std	Z+2, r26	; 0x02
    1bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	01 5c       	subi	r16, 0xC1	; 193
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ed 5b       	subi	r30, 0xBD	; 189
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	55 e4       	ldi	r21, 0x45	; 69
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ff 96       	adiw	r30, 0x3f	; 63
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <lcd_init4bit+0x84>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9e af       	std	Y+62, r25	; 0x3e
    1c10:	8d af       	std	Y+61, r24	; 0x3d
    1c12:	46 c0       	rjmp	.+140    	; 0x1ca0 <lcd_init4bit+0x110>
	else if (__tmp > 65535)
    1c14:	fe 01       	movw	r30, r28
    1c16:	ff 96       	adiw	r30, 0x3f	; 63
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	64 f5       	brge	.+88     	; 0x1c88 <lcd_init4bit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	fe 01       	movw	r30, r28
    1c32:	ed 5b       	subi	r30, 0xBD	; 189
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e af       	std	Y+62, r25	; 0x3e
    1c5c:	8d af       	std	Y+61, r24	; 0x3d
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <lcd_init4bit+0xee>
    1c60:	80 e9       	ldi	r24, 0x90	; 144
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	9c af       	std	Y+60, r25	; 0x3c
    1c66:	8b af       	std	Y+59, r24	; 0x3b
    1c68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <lcd_init4bit+0xdc>
    1c70:	9c af       	std	Y+60, r25	; 0x3c
    1c72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	9e af       	std	Y+62, r25	; 0x3e
    1c7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <lcd_init4bit+0xd0>
    1c86:	16 c0       	rjmp	.+44     	; 0x1cb4 <lcd_init4bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ff 96       	adiw	r30, 0x3f	; 63
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e af       	std	Y+62, r25	; 0x3e
    1c9e:	8d af       	std	Y+61, r24	; 0x3d
    1ca0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca4:	9a af       	std	Y+58, r25	; 0x3a
    1ca6:	89 af       	std	Y+57, r24	; 0x39
    1ca8:	89 ad       	ldd	r24, Y+57	; 0x39
    1caa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <lcd_init4bit+0x11c>
    1cb0:	9a af       	std	Y+58, r25	; 0x3a
    1cb2:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(30);
u8 loc_u8counter=0;
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e9 5b       	subi	r30, 0xB9	; 185
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	10 82       	st	Z, r1
//set direction of the used pins
for(loc_u8counter =LCD_PIN_START;loc_u8counter<(LCD_PIN_START+4) ;loc_u8counter++ ){
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e9 5b       	subi	r30, 0xB9	; 185
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	80 83       	st	Z, r24
    1cc6:	11 c0       	rjmp	.+34     	; 0x1cea <lcd_init4bit+0x15a>

	mdio_setbindirection (loc_u8counter,DATA_PORT,BIN_OUTPUT);
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e9 5b       	subi	r30, 0xB9	; 185
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 81       	ld	r24, Z
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
}
void lcd_init4bit(){
_delay_ms(30);
u8 loc_u8counter=0;
//set direction of the used pins
for(loc_u8counter =LCD_PIN_START;loc_u8counter<(LCD_PIN_START+4) ;loc_u8counter++ ){
    1cd8:	de 01       	movw	r26, r28
    1cda:	a9 5b       	subi	r26, 0xB9	; 185
    1cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e9 5b       	subi	r30, 0xB9	; 185
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	8c 93       	st	X, r24
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 5b       	subi	r30, 0xB9	; 185
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 30       	cpi	r24, 0x08	; 8
    1cf4:	48 f3       	brcs	.-46     	; 0x1cc8 <lcd_init4bit+0x138>

	mdio_setbindirection (loc_u8counter,DATA_PORT,BIN_OUTPUT);
}
//set dir of control bins

mdio_setbindirection (RS,CONTROL_PORT,BIN_OUTPUT);
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
mdio_setbindirection (RW,CONTROL_PORT,BIN_OUTPUT);
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
mdio_setbindirection (E,CONTROL_PORT,BIN_OUTPUT);
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
//send high nibble of the fun set as datasheet said
mdio_setnibblevalue(LCD_PIN_START,DATA_PORT,FUN_SET_MODE>>4);
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	42 e0       	ldi	r20, 0x02	; 2
    1d1a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mdio_setnibblevalue>
mdio_setbinvalue(E,CONTROL_PORT,BIN_HIGH);
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e4       	ldi	r27, 0x40	; 64
    1d30:	8d ab       	std	Y+53, r24	; 0x35
    1d32:	9e ab       	std	Y+54, r25	; 0x36
    1d34:	af ab       	std	Y+55, r26	; 0x37
    1d36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	6d a9       	ldd	r22, Y+53	; 0x35
    1d3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a e7       	ldi	r20, 0x7A	; 122
    1d46:	55 e4       	ldi	r21, 0x45	; 69
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	89 ab       	std	Y+49, r24	; 0x31
    1d52:	9a ab       	std	Y+50, r25	; 0x32
    1d54:	ab ab       	std	Y+51, r26	; 0x33
    1d56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d58:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <lcd_init4bit+0x1ea>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	98 ab       	std	Y+48, r25	; 0x30
    1d76:	8f a7       	std	Y+47, r24	; 0x2f
    1d78:	3f c0       	rjmp	.+126    	; 0x1df8 <lcd_init4bit+0x268>
	else if (__tmp > 65535)
    1d7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d80:	9c a9       	ldd	r25, Y+52	; 0x34
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	4c f5       	brge	.+82     	; 0x1de4 <lcd_init4bit+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	6d a9       	ldd	r22, Y+53	; 0x35
    1d94:	7e a9       	ldd	r23, Y+54	; 0x36
    1d96:	8f a9       	ldd	r24, Y+55	; 0x37
    1d98:	98 ad       	ldd	r25, Y+56	; 0x38
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	98 ab       	std	Y+48, r25	; 0x30
    1db8:	8f a7       	std	Y+47, r24	; 0x2f
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <lcd_init4bit+0x24a>
    1dbc:	80 e9       	ldi	r24, 0x90	; 144
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	9e a7       	std	Y+46, r25	; 0x2e
    1dc2:	8d a7       	std	Y+45, r24	; 0x2d
    1dc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <lcd_init4bit+0x238>
    1dcc:	9e a7       	std	Y+46, r25	; 0x2e
    1dce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	98 ab       	std	Y+48, r25	; 0x30
    1dd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ddc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	69 f7       	brne	.-38     	; 0x1dbc <lcd_init4bit+0x22c>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <lcd_init4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de4:	69 a9       	ldd	r22, Y+49	; 0x31
    1de6:	7a a9       	ldd	r23, Y+50	; 0x32
    1de8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dea:	9c a9       	ldd	r25, Y+52	; 0x34
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	98 ab       	std	Y+48, r25	; 0x30
    1df6:	8f a7       	std	Y+47, r24	; 0x2f
    1df8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfc:	9c a7       	std	Y+44, r25	; 0x2c
    1dfe:	8b a7       	std	Y+43, r24	; 0x2b
    1e00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <lcd_init4bit+0x274>
    1e08:	9c a7       	std	Y+44, r25	; 0x2c
    1e0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	mdio_setbinvalue(E,CONTROL_PORT,BIN_LOW);
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
/* start of init sequence */
//send fun set command
lcd_writecmd(FUN_SET_MODE);
    1e16:	88 e2       	ldi	r24, 0x28	; 40
    1e18:	0e 94 a4 0c 	call	0x1948	; 0x1948 <lcd_writecmd>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 e8       	ldi	r26, 0x80	; 128
    1e22:	bf e3       	ldi	r27, 0x3F	; 63
    1e24:	8f a3       	std	Y+39, r24	; 0x27
    1e26:	98 a7       	std	Y+40, r25	; 0x28
    1e28:	a9 a7       	std	Y+41, r26	; 0x29
    1e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e30:	89 a5       	ldd	r24, Y+41	; 0x29
    1e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a e7       	ldi	r20, 0x7A	; 122
    1e3a:	55 e4       	ldi	r21, 0x45	; 69
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8b a3       	std	Y+35, r24	; 0x23
    1e46:	9c a3       	std	Y+36, r25	; 0x24
    1e48:	ad a3       	std	Y+37, r26	; 0x25
    1e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <lcd_init4bit+0x2de>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <lcd_init4bit+0x35c>
	else if (__tmp > 65535)
    1e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e70:	7c a1       	ldd	r23, Y+36	; 0x24
    1e72:	8d a1       	ldd	r24, Y+37	; 0x25
    1e74:	9e a1       	ldd	r25, Y+38	; 0x26
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <lcd_init4bit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	6f a1       	ldd	r22, Y+39	; 0x27
    1e88:	78 a5       	ldd	r23, Y+40	; 0x28
    1e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9a a3       	std	Y+34, r25	; 0x22
    1eac:	89 a3       	std	Y+33, r24	; 0x21
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <lcd_init4bit+0x33e>
    1eb0:	80 e9       	ldi	r24, 0x90	; 144
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	98 a3       	std	Y+32, r25	; 0x20
    1eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eba:	98 a1       	ldd	r25, Y+32	; 0x20
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <lcd_init4bit+0x32c>
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <lcd_init4bit+0x320>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <lcd_init4bit+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9a a3       	std	Y+34, r25	; 0x22
    1eea:	89 a3       	std	Y+33, r24	; 0x21
    1eec:	89 a1       	ldd	r24, Y+33	; 0x21
    1eee:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <lcd_init4bit+0x368>
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d

// send display on/off command
_delay_ms(1);
lcd_writecmd(DISPLAY_COMMAND );
    1f00:	8f e0       	ldi	r24, 0x0F	; 15
    1f02:	0e 94 a4 0c 	call	0x1948	; 0x1948 <lcd_writecmd>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e8       	ldi	r26, 0x80	; 128
    1f0c:	bf e3       	ldi	r27, 0x3F	; 63
    1f0e:	89 8f       	std	Y+25, r24	; 0x19
    1f10:	9a 8f       	std	Y+26, r25	; 0x1a
    1f12:	ab 8f       	std	Y+27, r26	; 0x1b
    1f14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	69 8d       	ldd	r22, Y+25	; 0x19
    1f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	55 e4       	ldi	r21, 0x45	; 69
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8d 8b       	std	Y+21, r24	; 0x15
    1f30:	9e 8b       	std	Y+22, r25	; 0x16
    1f32:	af 8b       	std	Y+23, r26	; 0x17
    1f34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f36:	6d 89       	ldd	r22, Y+21	; 0x15
    1f38:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <lcd_init4bit+0x3c8>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9c 8b       	std	Y+20, r25	; 0x14
    1f54:	8b 8b       	std	Y+19, r24	; 0x13
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <lcd_init4bit+0x446>
	else if (__tmp > 65535)
    1f58:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <lcd_init4bit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	69 8d       	ldd	r22, Y+25	; 0x19
    1f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <lcd_init4bit+0x428>
    1f9a:	80 e9       	ldi	r24, 0x90	; 144
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	9a 8b       	std	Y+18, r25	; 0x12
    1fa0:	89 8b       	std	Y+17, r24	; 0x11
    1fa2:	89 89       	ldd	r24, Y+17	; 0x11
    1fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <lcd_init4bit+0x416>
    1faa:	9a 8b       	std	Y+18, r25	; 0x12
    1fac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	9c 8b       	std	Y+20, r25	; 0x14
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <lcd_init4bit+0x40a>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <lcd_init4bit+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fda:	98 8b       	std	Y+16, r25	; 0x10
    1fdc:	8f 87       	std	Y+15, r24	; 0x0f
    1fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe0:	98 89       	ldd	r25, Y+16	; 0x10
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <lcd_init4bit+0x452>
    1fe6:	98 8b       	std	Y+16, r25	; 0x10
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f

//display clear
_delay_ms(1);
lcd_writecmd(CLEAR_DISPLAY  );
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	0e 94 a4 0c 	call	0x1948	; 0x1948 <lcd_writecmd>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e4       	ldi	r27, 0x40	; 64
    1ff8:	8b 87       	std	Y+11, r24	; 0x0b
    1ffa:	9c 87       	std	Y+12, r25	; 0x0c
    1ffc:	ad 87       	std	Y+13, r26	; 0x0d
    1ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	55 e4       	ldi	r21, 0x45	; 69
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8f 83       	std	Y+7, r24	; 0x07
    201a:	98 87       	std	Y+8, r25	; 0x08
    201c:	a9 87       	std	Y+9, r26	; 0x09
    201e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <lcd_init4bit+0x4b2>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <lcd_init4bit+0x530>
	else if (__tmp > 65535)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <lcd_init4bit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <lcd_init4bit+0x512>
    2084:	80 e9       	ldi	r24, 0x90	; 144
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <lcd_init4bit+0x500>
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <lcd_init4bit+0x4f4>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <lcd_init4bit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <lcd_init4bit+0x53c>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01


//send entery mode
_delay_ms(2);
lcd_writecmd(ENTRY_MODE_COMMAND   );
    20d4:	86 e0       	ldi	r24, 0x06	; 6
    20d6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <lcd_writecmd>
}
    20da:	c9 5b       	subi	r28, 0xB9	; 185
    20dc:	df 4f       	sbci	r29, 0xFF	; 255
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	08 95       	ret

000020f2 <lcd_writechar4bit>:
void lcd_writechar4bit (u8 copy_u8data){
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	6d 97       	sbiw	r28, 0x1d	; 29
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	8d 8f       	std	Y+29, r24	; 0x1d
	//set rw to zero
		mdio_setbinvalue(RW,CONTROL_PORT,BIN_LOW);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
		//set rs to high to write data
		mdio_setbinvalue(RS,CONTROL_PORT,BIN_HIGH);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
	// set high nibble value to command
		mdio_setnibblevalue(LCD_PIN_START,DATA_PORT,copy_u8data>>4);
    211c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    211e:	98 2f       	mov	r25, r24
    2120:	92 95       	swap	r25
    2122:	9f 70       	andi	r25, 0x0F	; 15
    2124:	84 e0       	ldi	r24, 0x04	; 4
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	49 2f       	mov	r20, r25
    212a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mdio_setnibblevalue>
		//the falling edge of enable
		mdio_setbinvalue(E,CONTROL_PORT,BIN_HIGH);
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e0       	ldi	r26, 0x00	; 0
    213e:	b0 e4       	ldi	r27, 0x40	; 64
    2140:	89 8f       	std	Y+25, r24	; 0x19
    2142:	9a 8f       	std	Y+26, r25	; 0x1a
    2144:	ab 8f       	std	Y+27, r26	; 0x1b
    2146:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	69 8d       	ldd	r22, Y+25	; 0x19
    214a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	55 e4       	ldi	r21, 0x45	; 69
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8d 8b       	std	Y+21, r24	; 0x15
    2162:	9e 8b       	std	Y+22, r25	; 0x16
    2164:	af 8b       	std	Y+23, r26	; 0x17
    2166:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <lcd_writechar4bit+0x98>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 8b       	std	Y+20, r25	; 0x14
    2186:	8b 8b       	std	Y+19, r24	; 0x13
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <lcd_writechar4bit+0x116>
	else if (__tmp > 65535)
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <lcd_writechar4bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	69 8d       	ldd	r22, Y+25	; 0x19
    21a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <lcd_writechar4bit+0xf8>
    21cc:	80 e9       	ldi	r24, 0x90	; 144
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	9a 8b       	std	Y+18, r25	; 0x12
    21d2:	89 8b       	std	Y+17, r24	; 0x11
    21d4:	89 89       	ldd	r24, Y+17	; 0x11
    21d6:	9a 89       	ldd	r25, Y+18	; 0x12
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <lcd_writechar4bit+0xe6>
    21dc:	9a 8b       	std	Y+18, r25	; 0x12
    21de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	9c 8b       	std	Y+20, r25	; 0x14
    21e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8b 89       	ldd	r24, Y+19	; 0x13
    21ec:	9c 89       	ldd	r25, Y+20	; 0x14
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <lcd_writechar4bit+0xda>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <lcd_writechar4bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	9c 89       	ldd	r25, Y+20	; 0x14
    220c:	98 8b       	std	Y+16, r25	; 0x10
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    2210:	8f 85       	ldd	r24, Y+15	; 0x0f
    2212:	98 89       	ldd	r25, Y+16	; 0x10
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <lcd_writechar4bit+0x122>
    2218:	98 8b       	std	Y+16, r25	; 0x10
    221a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		mdio_setbinvalue(E,CONTROL_PORT,BIN_LOW);
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	61 e0       	ldi	r22, 0x01	; 1
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>

		mdio_setnibblevalue(LCD_PIN_START,DATA_PORT,copy_u8data);
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    222c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <mdio_setnibblevalue>
		//the falling edge of enable
			mdio_setbinvalue(E,CONTROL_PORT,BIN_HIGH);
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	41 e0       	ldi	r20, 0x01	; 1
    2236:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a0 e0       	ldi	r26, 0x00	; 0
    2240:	b0 e4       	ldi	r27, 0x40	; 64
    2242:	8b 87       	std	Y+11, r24	; 0x0b
    2244:	9c 87       	std	Y+12, r25	; 0x0c
    2246:	ad 87       	std	Y+13, r26	; 0x0d
    2248:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	55 e4       	ldi	r21, 0x45	; 69
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8f 83       	std	Y+7, r24	; 0x07
    2264:	98 87       	std	Y+8, r25	; 0x08
    2266:	a9 87       	std	Y+9, r26	; 0x09
    2268:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <lcd_writechar4bit+0x19a>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	3f c0       	rjmp	.+126    	; 0x230a <lcd_writechar4bit+0x218>
	else if (__tmp > 65535)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <lcd_writechar4bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <lcd_writechar4bit+0x1fa>
    22ce:	80 e9       	ldi	r24, 0x90	; 144
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <lcd_writechar4bit+0x1e8>
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <lcd_writechar4bit+0x1dc>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <lcd_writechar4bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <lcd_writechar4bit+0x224>
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			mdio_setbinvalue(E,CONTROL_PORT,BIN_LOW);
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	0e 94 51 08 	call	0x10a2	; 0x10a2 <mdio_setbinvalue>
};
    2328:	6d 96       	adiw	r28, 0x1d	; 29
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <lcd_setposition>:
void lcd_setposition (u8 line_no , u8 pos_no){
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <lcd_setposition+0x6>
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	6a 83       	std	Y+2, r22	; 0x02
if((line_no== LCD_LINE_0)||(line_no== LCD_LINE_1)){
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	88 23       	and	r24, r24
    234c:	19 f0       	breq	.+6      	; 0x2354 <lcd_setposition+0x1a>
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	79 f4       	brne	.+30     	; 0x2372 <lcd_setposition+0x38>
if(pos_no<16){
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	80 31       	cpi	r24, 0x10	; 16
    2358:	60 f4       	brcc	.+24     	; 0x2372 <lcd_setposition+0x38>
if(line_no== LCD_LINE_0){
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 23       	and	r24, r24
    235e:	29 f4       	brne	.+10     	; 0x236a <lcd_setposition+0x30>
	lcd_writecmd(pos_no+LINE_0_OFFSET);
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	80 58       	subi	r24, 0x80	; 128
    2364:	0e 94 a4 0c 	call	0x1948	; 0x1948 <lcd_writecmd>
    2368:	04 c0       	rjmp	.+8      	; 0x2372 <lcd_setposition+0x38>
}
else {
	lcd_writecmd(pos_no+LINE_1_OFFSET);
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	80 54       	subi	r24, 0x40	; 64
    236e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <lcd_writecmd>
}
else {
	//wrong line
}
}
};
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <lcd_writestring>:
void lcd_writestring (u8*copy_u8data){
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <lcd_writestring+0x6>
    2382:	0f 92       	push	r0
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	8a 83       	std	Y+2, r24	; 0x02

for(u8 i=0 ;copy_u8data[i]!='\0';i++){
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	0e c0       	rjmp	.+28     	; 0x23ac <lcd_writestring+0x30>
	lcd_writechar4bit ( copy_u8data[i]);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	fc 01       	movw	r30, r24
    239c:	e2 0f       	add	r30, r18
    239e:	f3 1f       	adc	r31, r19
    23a0:	80 81       	ld	r24, Z
    23a2:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
}
}
};
void lcd_writestring (u8*copy_u8data){

for(u8 i=0 ;copy_u8data[i]!='\0';i++){
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	8f 5f       	subi	r24, 0xFF	; 255
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	80 81       	ld	r24, Z
    23be:	88 23       	and	r24, r24
    23c0:	39 f7       	brne	.-50     	; 0x2390 <lcd_writestring+0x14>
	lcd_writechar4bit ( copy_u8data[i]);
}

};
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <lcd_writenumber>:
void lcd_writenumber (u8 copy_u8number){
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <lcd_writenumber+0x6>
    23d4:	0f 92       	push	r0
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	8b 83       	std	Y+3, r24	; 0x03

u8 new_no =0;
    23dc:	1a 82       	std	Y+2, r1	; 0x02
 u8 real_no =0;
    23de:	19 82       	std	Y+1, r1	; 0x01
 real_no=copy_u8number;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	10 c0       	rjmp	.+32     	; 0x2406 <lcd_writenumber+0x38>
while (copy_u8number>0){

	new_no=real_no%10;
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a e0       	ldi	r25, 0x0A	; 10
    23ea:	69 2f       	mov	r22, r25
    23ec:	0e 94 c9 12 	call	0x2592	; 0x2592 <__udivmodqi4>
    23f0:	89 2f       	mov	r24, r25
    23f2:	8a 83       	std	Y+2, r24	; 0x02
			lcd_writechar4bit ( new_no);
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
			real_no=real_no/10;
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a e0       	ldi	r25, 0x0A	; 10
    23fe:	69 2f       	mov	r22, r25
    2400:	0e 94 c9 12 	call	0x2592	; 0x2592 <__udivmodqi4>
    2404:	89 83       	std	Y+1, r24	; 0x01
void lcd_writenumber (u8 copy_u8number){

u8 new_no =0;
 u8 real_no =0;
 real_no=copy_u8number;
while (copy_u8number>0){
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	88 23       	and	r24, r24
    240a:	69 f7       	brne	.-38     	; 0x23e6 <lcd_writenumber+0x18>
			real_no=real_no/10;


}

};
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <main>:
#include "MCAL/MGIE/interface.h"
#include "MCAL/mdio/mdio_interface.h"
#include "HAL/LCD/LCD_INTERFACE.h"

int main ()
{ // tperiod =0.016;
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	a5 97       	sbiw	r28, 0x25	; 37
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
u8  freq[10] ="F=62.5hz " ;//1/tov =1/2^res *ticktime
    242c:	ce 01       	movw	r24, r28
    242e:	08 96       	adiw	r24, 0x08	; 8
    2430:	9d 8f       	std	Y+29, r25	; 0x1d
    2432:	8c 8f       	std	Y+28, r24	; 0x1c
    2434:	e0 e6       	ldi	r30, 0x60	; 96
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ff 8f       	std	Y+31, r31	; 0x1f
    243a:	ee 8f       	std	Y+30, r30	; 0x1e
    243c:	fa e0       	ldi	r31, 0x0A	; 10
    243e:	f8 a3       	std	Y+32, r31	; 0x20
    2440:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2442:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2444:	00 80       	ld	r0, Z
    2446:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2448:	9f 8d       	ldd	r25, Y+31	; 0x1f
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	9f 8f       	std	Y+31, r25	; 0x1f
    244e:	8e 8f       	std	Y+30, r24	; 0x1e
    2450:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2452:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2454:	00 82       	st	Z, r0
    2456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2458:	9d 8d       	ldd	r25, Y+29	; 0x1d
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	9d 8f       	std	Y+29, r25	; 0x1d
    245e:	8c 8f       	std	Y+28, r24	; 0x1c
    2460:	98 a1       	ldd	r25, Y+32	; 0x20
    2462:	91 50       	subi	r25, 0x01	; 1
    2464:	98 a3       	std	Y+32, r25	; 0x20
    2466:	e8 a1       	ldd	r30, Y+32	; 0x20
    2468:	ee 23       	and	r30, r30
    246a:	51 f7       	brne	.-44     	; 0x2440 <main+0x28>
// ton =0.008;
u8  duty[10]="D=50%";
    246c:	ce 01       	movw	r24, r28
    246e:	42 96       	adiw	r24, 0x12	; 18
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
    2474:	ea e6       	ldi	r30, 0x6A	; 106
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	fc a3       	std	Y+36, r31	; 0x24
    247a:	eb a3       	std	Y+35, r30	; 0x23
    247c:	f6 e0       	ldi	r31, 0x06	; 6
    247e:	fd a3       	std	Y+37, r31	; 0x25
    2480:	eb a1       	ldd	r30, Y+35	; 0x23
    2482:	fc a1       	ldd	r31, Y+36	; 0x24
    2484:	00 80       	ld	r0, Z
    2486:	8b a1       	ldd	r24, Y+35	; 0x23
    2488:	9c a1       	ldd	r25, Y+36	; 0x24
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	9c a3       	std	Y+36, r25	; 0x24
    248e:	8b a3       	std	Y+35, r24	; 0x23
    2490:	e9 a1       	ldd	r30, Y+33	; 0x21
    2492:	fa a1       	ldd	r31, Y+34	; 0x22
    2494:	00 82       	st	Z, r0
    2496:	89 a1       	ldd	r24, Y+33	; 0x21
    2498:	9a a1       	ldd	r25, Y+34	; 0x22
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	9a a3       	std	Y+34, r25	; 0x22
    249e:	89 a3       	std	Y+33, r24	; 0x21
    24a0:	9d a1       	ldd	r25, Y+37	; 0x25
    24a2:	91 50       	subi	r25, 0x01	; 1
    24a4:	9d a3       	std	Y+37, r25	; 0x25
    24a6:	ed a1       	ldd	r30, Y+37	; 0x25
    24a8:	ee 23       	and	r30, r30
    24aa:	51 f7       	brne	.-44     	; 0x2480 <main+0x68>
    24ac:	18 8e       	std	Y+24, r1	; 0x18
    24ae:	19 8e       	std	Y+25, r1	; 0x19
    24b0:	1a 8e       	std	Y+26, r1	; 0x1a
    24b2:	1b 8e       	std	Y+27, r1	; 0x1b
 u8 D=80; //duty cycle number
    24b4:	80 e5       	ldi	r24, 0x50	; 80
    24b6:	8f 83       	std	Y+7, r24	; 0x07
 pwm_init();
    24b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <pwm_init>
	 lcd_init4bit();
    24bc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <lcd_init4bit>
	 mdio_setbindirection (PIN3,MDIO_PORTB , BIN_OUTPUT); /*set OC0 pin as output*/
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 14 07 	call	0xe28	; 0xe28 <mdio_setbindirection>
//	lcd_writechar4bit ('m');
//lcd_writenumber (172);

 lcd_writestring (freq);
    24ca:	ce 01       	movw	r24, r28
    24cc:	08 96       	adiw	r24, 0x08	; 8
    24ce:	0e 94 be 11 	call	0x237c	; 0x237c <lcd_writestring>
 		lcd_writestring (duty);
    24d2:	ce 01       	movw	r24, r28
    24d4:	42 96       	adiw	r24, 0x12	; 18
    24d6:	0e 94 be 11 	call	0x237c	; 0x237c <lcd_writestring>
 		lcd_setposition (1 , 0);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	0e 94 9d 11 	call	0x233a	; 0x233a <lcd_setposition>
 while(1){
//make a pwm with duty cylce =50%
		/*ocr0 =dutycycle*2^res
		so to make duty 50% ,makce ocro =127
		*/
timer_setctc(127);
    24e2:	8f e7       	ldi	r24, 0x7F	; 127
    24e4:	0e 94 21 06 	call	0xc42	; 0xc42 <timer_setctc>
u8 counter1 =D/10;//first counter for first half cycle
    24e8:	8f 81       	ldd	r24, Y+7	; 0x07
    24ea:	9a e0       	ldi	r25, 0x0A	; 10
    24ec:	69 2f       	mov	r22, r25
    24ee:	0e 94 c9 12 	call	0x2592	; 0x2592 <__udivmodqi4>
    24f2:	8e 83       	std	Y+6, r24	; 0x06
u8 counter2 =10-counter1;//second counter for second half cycle
    24f4:	9a e0       	ldi	r25, 0x0A	; 10
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	f9 2f       	mov	r31, r25
    24fa:	f8 1b       	sub	r31, r24
    24fc:	8f 2f       	mov	r24, r31
    24fe:	8d 83       	std	Y+5, r24	; 0x05
lcd_writestring (freq);
    2500:	ce 01       	movw	r24, r28
    2502:	08 96       	adiw	r24, 0x08	; 8
    2504:	0e 94 be 11 	call	0x237c	; 0x237c <lcd_writestring>
		lcd_writestring (duty);
    2508:	ce 01       	movw	r24, r28
    250a:	42 96       	adiw	r24, 0x12	; 18
    250c:	0e 94 be 11 	call	0x237c	; 0x237c <lcd_writestring>
		lcd_setposition (1 , 0);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	0e 94 9d 11 	call	0x233a	; 0x233a <lcd_setposition>
		for(u8 i=0;i<counter1;i++){
    2518:	1c 82       	std	Y+4, r1	; 0x04
    251a:	06 c0       	rjmp	.+12     	; 0x2528 <main+0x110>
		lcd_writechar4bit ('_');
    251c:	8f e5       	ldi	r24, 0x5F	; 95
    251e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
u8 counter1 =D/10;//first counter for first half cycle
u8 counter2 =10-counter1;//second counter for second half cycle
lcd_writestring (freq);
		lcd_writestring (duty);
		lcd_setposition (1 , 0);
		for(u8 i=0;i<counter1;i++){
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	8c 83       	std	Y+4, r24	; 0x04
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	8e 81       	ldd	r24, Y+6	; 0x06
    252c:	98 17       	cp	r25, r24
    252e:	b0 f3       	brcs	.-20     	; 0x251c <main+0x104>
		lcd_writechar4bit ('_');
}
		lcd_writechar4bit ('|');
    2530:	8c e7       	ldi	r24, 0x7C	; 124
    2532:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>

		for(u8 x=0;x<counter2;x++){
    2536:	1b 82       	std	Y+3, r1	; 0x03
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <main+0x12e>
		lcd_writechar4bit ('-');
    253a:	8d e2       	ldi	r24, 0x2D	; 45
    253c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
		for(u8 i=0;i<counter1;i++){
		lcd_writechar4bit ('_');
}
		lcd_writechar4bit ('|');

		for(u8 x=0;x<counter2;x++){
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	8f 5f       	subi	r24, 0xFF	; 255
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	98 17       	cp	r25, r24
    254c:	b0 f3       	brcs	.-20     	; 0x253a <main+0x122>
		lcd_writechar4bit ('-');
}
		lcd_writechar4bit ('|');
    254e:	8c e7       	ldi	r24, 0x7C	; 124
    2550:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>


		for(u8 i=0;i<counter1;i++){
    2554:	1a 82       	std	Y+2, r1	; 0x02
    2556:	06 c0       	rjmp	.+12     	; 0x2564 <main+0x14c>
		lcd_writechar4bit ('_');
    2558:	8f e5       	ldi	r24, 0x5F	; 95
    255a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
		lcd_writechar4bit ('-');
}
		lcd_writechar4bit ('|');


		for(u8 i=0;i<counter1;i++){
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8a 83       	std	Y+2, r24	; 0x02
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	8e 81       	ldd	r24, Y+6	; 0x06
    2568:	98 17       	cp	r25, r24
    256a:	b0 f3       	brcs	.-20     	; 0x2558 <main+0x140>
		lcd_writechar4bit ('_');
}
		lcd_writechar4bit ('|');
    256c:	8c e7       	ldi	r24, 0x7C	; 124
    256e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
		for(u8 x=0;x<counter2;x++){
    2572:	19 82       	std	Y+1, r1	; 0x01
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <main+0x16a>
		lcd_writechar4bit ('-');
    2576:	8d e2       	ldi	r24, 0x2D	; 45
    2578:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>

		for(u8 i=0;i<counter1;i++){
		lcd_writechar4bit ('_');
}
		lcd_writechar4bit ('|');
		for(u8 x=0;x<counter2;x++){
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	99 81       	ldd	r25, Y+1	; 0x01
    2584:	8d 81       	ldd	r24, Y+5	; 0x05
    2586:	98 17       	cp	r25, r24
    2588:	b0 f3       	brcs	.-20     	; 0x2576 <main+0x15e>
		lcd_writechar4bit ('-');
}
		lcd_writechar4bit ('|');
    258a:	8c e7       	ldi	r24, 0x7C	; 124
    258c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <lcd_writechar4bit>
    2590:	a8 cf       	rjmp	.-176    	; 0x24e2 <main+0xca>

00002592 <__udivmodqi4>:
    2592:	99 1b       	sub	r25, r25
    2594:	79 e0       	ldi	r23, 0x09	; 9
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <__udivmodqi4_ep>

00002598 <__udivmodqi4_loop>:
    2598:	99 1f       	adc	r25, r25
    259a:	96 17       	cp	r25, r22
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <__udivmodqi4_ep>
    259e:	96 1b       	sub	r25, r22

000025a0 <__udivmodqi4_ep>:
    25a0:	88 1f       	adc	r24, r24
    25a2:	7a 95       	dec	r23
    25a4:	c9 f7       	brne	.-14     	; 0x2598 <__udivmodqi4_loop>
    25a6:	80 95       	com	r24
    25a8:	08 95       	ret

000025aa <__prologue_saves__>:
    25aa:	2f 92       	push	r2
    25ac:	3f 92       	push	r3
    25ae:	4f 92       	push	r4
    25b0:	5f 92       	push	r5
    25b2:	6f 92       	push	r6
    25b4:	7f 92       	push	r7
    25b6:	8f 92       	push	r8
    25b8:	9f 92       	push	r9
    25ba:	af 92       	push	r10
    25bc:	bf 92       	push	r11
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	ca 1b       	sub	r28, r26
    25d4:	db 0b       	sbc	r29, r27
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	09 94       	ijmp

000025e2 <__epilogue_restores__>:
    25e2:	2a 88       	ldd	r2, Y+18	; 0x12
    25e4:	39 88       	ldd	r3, Y+17	; 0x11
    25e6:	48 88       	ldd	r4, Y+16	; 0x10
    25e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    25ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    25f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25f4:	b9 84       	ldd	r11, Y+9	; 0x09
    25f6:	c8 84       	ldd	r12, Y+8	; 0x08
    25f8:	df 80       	ldd	r13, Y+7	; 0x07
    25fa:	ee 80       	ldd	r14, Y+6	; 0x06
    25fc:	fd 80       	ldd	r15, Y+5	; 0x05
    25fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2600:	1b 81       	ldd	r17, Y+3	; 0x03
    2602:	aa 81       	ldd	r26, Y+2	; 0x02
    2604:	b9 81       	ldd	r27, Y+1	; 0x01
    2606:	ce 0f       	add	r28, r30
    2608:	d1 1d       	adc	r29, r1
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	ed 01       	movw	r28, r26
    2616:	08 95       	ret

00002618 <_exit>:
    2618:	f8 94       	cli

0000261a <__stop_program>:
    261a:	ff cf       	rjmp	.-2      	; 0x261a <__stop_program>
